; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
description = GPS module for mobile apps used to log lap times at a track circuit
extra_configs =
	platformio_custom.ini
; see platformio_custom.ini.template for an example to have your own definitions outside of version control

[env]
platform = espressif32
framework = arduino
lib_deps = 
	h2zero/NimBLE-Arduino @ ^2.2.3
	yiannisbourkelis/Uptime Library @ ^1.0.0
	evert-arias/EasyButton @ 2.0.1
	arkhipenko/TaskScheduler @ ^3.8.5
board_build.partitions = min_spiffs.csv
monitor_speed = 115200
monitor_filters = colorize, esp32_exception_decoder
build_flags = !python git_rev_macro.py
lib_ldf_mode = chain+

[env:esp32dev]
; basic configuration for a production build without logging
; OTA is disabled
board = esp32dev
monitor_port = /dev/cu.usbserial-0001
upload_port = /dev/cu.usbserial-0001
board_build.f_flash = 80000000L
build_flags = 
	${env.build_flags}
	-DLOG_LOCAL_LEVEL=ESP_LOG_NONE
	-DCORE_DEBUG_LEVEL=0
	-DBUILD_ENV_NAME='"Prod build"'
	-DNO_GLOBAL_ARDUINOOTA

[env:esp32dev_ota]
; basic configuration for a production build without logging
; Update is OTA, OTA is enabled without timeout
board = esp32dev
upload_protocol = espota
upload_port = bonogps.local
board_build.f_flash = 80000000L
build_flags = 
	${env.build_flags}
	-DLOG_LOCAL_LEVEL=ESP_LOG_NONE
	-DCORE_DEBUG_LEVEL=0
	-DENABLE_OTA
	-DOTA_AVAILABILITY_SECS=-1
	-DBUILD_ENV_NAME='"Prod build - OTA"'

[env:esp32dev_debug]
; basic configuration for a troublshooting/debug build without verbose logging
; OTA is enabled without timeout
board = esp32dev
monitor_port = /dev/cu.usbserial-0001
upload_port = /dev/cu.usbserial-0001
board_build.f_flash = 80000000L
build_type = debug
build_flags = 
	${env.build_flags}
	-DLOG_LOCAL_LEVEL=ESP_LOG_DEBUG
	-DCORE_DEBUG_LEVEL=4
	-DENABLE_OTA
	-DOTA_AVAILABILITY_SECS=-1
	-DBUILD_ENV_NAME='"Test build - OTA"'

[env:lolind32pro]
; lolind32 pro target with no logging
; not good for troubleshooting on serial as nothing is printed
; OTA is not enabled for standard value of 300 secs upon restart
board = lolin_d32_pro
board_build.f_flash = 80000000L
; board_build.flash_mode = qio
build_flags = 
	${env.build_flags}
	-DLOG_LOCAL_LEVEL=ESP_LOG_NONE
	-DCORE_DEBUG_LEVEL=0
	-DNO_GLOBAL_ARDUINOOTA
	-DBUILD_ENV_NAME='"Prod build"'
;	-DBOARD_HAS_PSRAM
;    -mfix-esp32-psram-cache-issue

[env:lolind32pro_ota]
; lolind32 pro target with no logging
; not good for troubleshooting on serial as nothing is printed
; OTA is enabled forever
board = lolin_d32_pro
upload_protocol = espota
upload_port = bonogps.local
board_build.f_flash = 80000000L
build_flags = 
	${env.build_flags}
	-DLOG_LOCAL_LEVEL=ESP_LOG_NONE
	-DCORE_DEBUG_LEVEL=0
	-DENABLE_OTA
	-DOTA_AVAILABILITY_SECS=-1
	-DBUILD_ENV_NAME='"Prod build - OTA"'

[env:lolind32pro_debug]
; lolind32 pro target with extended logging
; not good for real applications as log bogs down performances
; OTA is enabled forever
board = lolin_d32_pro
build_type = debug
board_build.f_flash = 80000000L
; board_build.flash_mode = qio
build_flags = 
	${env.build_flags}
	-DLOG_LOCAL_LEVEL=ESP_LOG_DEBUG
	-DCORE_DEBUG_LEVEL=4
	-DENABLE_OTA
	-DOTA_AVAILABILITY_SECS=-1
	-DBUILD_ENV_NAME='"Test build - OTA"'
;	-DBOARD_HAS_PSRAM
;    -mfix-esp32-psram-cache-issue
